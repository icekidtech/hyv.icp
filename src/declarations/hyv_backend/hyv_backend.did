type RevenueShare = 
 record {
   creator: nat;
   platform: nat;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type PricingModel = record {usageBased: nat;};
type ModelType = 
 variant {
   CNN;
   DecisionTree;
   Ensemble;
   RNN;
   Transformer;
 };
type ModelNFT = 
 record {
   fileChunks: vec blob;
   id: nat;
   metadata: ModelMetadata;
   mintedAt: int;
   owner: principal;
   pricing: PricingModel;
   revenue: RevenueShare;
 };
type ModelMetadata = 
 record {
   architecture: text;
   description: text;
   domain: Domain;
   format: ModelFormat;
   modelType: ModelType;
   name: text;
   parameters: nat;
   performance: text;
 };
type ModelFormat = 
 variant {
   HuggingFace;
   ONNX;
   PyTorch;
   TensorFlow;
 };
type JobStatus = 
 variant {
   Completed;
   Failed;
   Pending;
   Running;
 };
type JobId = nat;
type GenerationJob = 
 record {
   config: text;
   createdAt: int;
   datasetId: opt nat;
   id: JobId;
   owner: principal;
   prompt: text;
   status: JobStatus;
 };
type Domain = 
 variant {
   Finance;
   Healthcare;
   NLP;
   Other;
   Vision;
 };
type DatasetId = nat;
type Dataset = 
 record {
   content: text;
   description: text;
   fileHash: text;
   id: nat;
   tags: vec text;
   title: text;
   uploadDate: int;
   uploader: principal;
 };
service : {
  generateAndStoreDataset: (prompt: text, _apiKey: text) -> (DatasetId);
  generateSyntheticData: (prompt: text, dataType: text) -> (Result);
  getDataset: (id: DatasetId) -> (opt Dataset) query;
  getJob: (jobId: JobId) -> (opt GenerationJob) query;
  getModelNFT: (id: nat) -> (opt ModelNFT) query;
  greet: (name: text) -> (text) query;
  listDatasets: () -> (vec Dataset) query;
  listModels: () -> (vec ModelNFT) query;
  listPendingJobs: () -> (vec GenerationJob) query;
  markJobComplete: (jobId: JobId, datasetId: nat) -> (bool);
  searchModels: (domain: opt Domain, modelType: opt ModelType, performance:
   opt text) -> (vec ModelNFT) query;
  submitGenerationJob: (prompt: text, config: text) -> (JobId);
  testAiConnection: () -> (Result);
  uploadDataset: (title: text, description: text, tags: vec text, fileHash:
   text, content: text) -> (DatasetId);
  uploadModel: (metadata: ModelMetadata, fileChunks: vec blob, pricing:
   PricingModel) -> (nat);
}
