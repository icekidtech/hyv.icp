#!/bin/bash
set -e

echo "üî® Building Hyv AI Engine..."

# Ensure we're in the right directory
cd "$(dirname "$0")/.."

# Ensure wasm32-wasi target is installed
rustup target add wasm32-wasi

# Navigate to the AI engine directory
cd src/hyv_ai_engine

# Clean previous builds
cargo clean

# Build the Rust canister with verbose output
echo "üì¶ Building Rust canister..."
CARGO_TARGET_DIR=target cargo build --target wasm32-wasi --release --lib

# Check if the build was successful
if [ $? -ne 0 ]; then
    echo "‚ùå Cargo build failed"
    exit 1
fi

# Look for the WASM file
WASM_FILE="target/wasm32-wasi/release/hyv_ai_engine.wasm"

if [ ! -f "$WASM_FILE" ]; then
    echo "‚ùå WASM file not found at expected location: $WASM_FILE"
    echo "üìÅ Contents of target/wasm32-wasi/release/:"
    ls -la target/wasm32-wasi/release/ || echo "Directory does not exist"
    
    # Try to find any .wasm files
    echo "üîç Searching for any .wasm files:"
    find target -name "*.wasm" -type f || echo "No .wasm files found"
    exit 1
fi

echo "‚úÖ Found WASM file: $WASM_FILE"

# Create IC-compatible WASM file
if command -v wasi2ic >/dev/null 2>&1; then
    echo "üîÑ Converting to IC-compatible WASM..."
    wasi2ic "$WASM_FILE" "${WASM_FILE%.wasm}-ic.wasm"
    
    if [ -f "${WASM_FILE%.wasm}-ic.wasm" ]; then
        echo "‚úÖ IC WASM file created: ${WASM_FILE%.wasm}-ic.wasm"
    else
        echo "‚ùå Failed to create IC WASM file"
        exit 1
    fi
else
    echo "‚ö†Ô∏è  wasi2ic not found, copying original WASM file"
    cp "$WASM_FILE" "${WASM_FILE%.wasm}-ic.wasm"
fi

echo "üéâ Build completed successfully!"